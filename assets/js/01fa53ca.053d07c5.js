"use strict";(self.webpackChunkClaire_AI_Docs=self.webpackChunkClaire_AI_Docs||[]).push([[790],{3905:function(e,t,r){r.d(t,{Zo:function(){return u},kt:function(){return f}});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var s=n.createContext({}),c=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},u=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=c(r),f=o,m=d["".concat(s,".").concat(f)]||d[f]||p[f]||i;return r?n.createElement(m,a(a({ref:t},u),{},{components:r})):n.createElement(m,a({ref:t},u))}));function f(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=r.length,a=new Array(i);a[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,a[1]=l;for(var c=2;c<i;c++)a[c]=r[c];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},2943:function(e,t,r){r.r(t),r.d(t,{assets:function(){return u},contentTitle:function(){return s},default:function(){return f},frontMatter:function(){return l},metadata:function(){return c},toc:function(){return p}});var n=r(7462),o=r(3366),i=(r(7294),r(3905)),a=["components"],l={sidebar_position:4,title:"Development setup",description:"How to develop for claire AI Sensor"},s=void 0,c={unversionedId:"sensor/installation",id:"sensor/installation",title:"Development setup",description:"How to develop for claire AI Sensor",source:"@site/docs/sensor/installation.mdx",sourceDirName:"sensor",slug:"/sensor/installation",permalink:"/claire-docs/developer-guides/sensor/installation",draft:!1,editUrl:"https://github.com/unlimited-hr/claire-docs/tree/main/docs/sensor/installation.mdx",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4,title:"Development setup",description:"How to develop for claire AI Sensor"},sidebar:"tutorialSidebar",previous:{title:"Sensor source code",permalink:"/claire-docs/developer-guides/sensor/"}},u={},p=[{value:"Getting started",id:"getting-started",level:2},{value:"Prototype",id:"prototype",level:2}],d={toc:p};function f(e){var t=e.components,r=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"getting-started"},"Getting started"),(0,i.kt)("p",null,"To be able to connect the NodeMCU with the Aruino IDE. We have to add the NodeMCU via the boarder manager. Here's a tutorial on how to do that"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://create.arduino.cc/projecthub/electropeak/getting-started-w-nodemcu-esp8266-on-arduino-ide-28184f"},"https://create.arduino.cc/projecthub/electropeak/getting-started-w-nodemcu-esp8266-on-arduino-ide-28184f")),(0,i.kt)("p",null,"When that is done, we need to install a few libraries.\nWe do this through the library manager.\nWe need to install the following libraries:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"WiFiManager by tzapu"),(0,i.kt)("li",{parentName:"ul"},"ArduinoJson by bblanchon"),(0,i.kt)("li",{parentName:"ul"},"ESP8266 by ESP8266 Community"),(0,i.kt)("li",{parentName:"ul"},"Adafruit SGP30 Sensor by Adafruit"),(0,i.kt)("li",{parentName:"ul"},"DHT sensor library by Adafruit Adafruit"),(0,i.kt)("li",{parentName:"ul"},"Unified Sensor by Adafruit")),(0,i.kt)("p",null,"Once the libraries are installed, we can upload the code to the NodeMCU board and the air meter is ready for use.\nWhen we start the device for the first time, it creates an 'Access point' prototype Then we fill the wi-fi data into the api-key."),(0,i.kt)("h2",{id:"prototype"},"Prototype"),(0,i.kt)("p",null,"Finally, we are going to save and the IoT device is ready to go.\nMicrocontroller and sensors Microcontroller | NodeMCU (ESP8266) Sensors SGP30 DHT11/22 Connections SGP30 sensor GND on GND VCC on 3.3V SCL on esp8266 D1 SDA on esp8266 D2 DHT11/DHT22 sensor GND on GND VCC on 3.3V Sensor to D5 / GPIO14"))}f.isMDXComponent=!0}}]);